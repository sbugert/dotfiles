set encoding=utf-8
scriptencoding utf8
set nocompatible

" Basics {{{

" store path to vim folder in local variable
let s:vimdir = fnamemodify(resolve(expand('<sfile>:p')), ':h')
" set default 'runtimepath' (without ~/.vim folders)
let &runtimepath = printf('%s/vimfiles,%s,%s/vimfiles/after', $VIM, $VIMRUNTIME, $VIM)
" add the directory to 'runtimepath'
let &runtimepath = printf('%s,%s,%s/after', s:vimdir, &runtimepath, s:vimdir)

set hidden " Switch between buffers without saving
set clipboard^=unnamedplus,unnamed " Share clipboard
set backspace=indent,eol,start " make backspace work like most other apps
set mouse=a " Allow mouse usage in terminal vim
if has('mouse_sgr')
  set ttymouse=sgr " Allow mouse usage in tmux and ssh sessions
endif
set laststatus=2 " Always show status line
set autoindent " Copy indent from current line when starting a new line
set wildmode=longest,list " make auto completion on command line work like in shell
set updatetime=300
set shortmess+=c " don't give |ins-completion-menu| messages.

" f1  store file marks
" '   # of previously edited files to remember marks for
" :   # of lines of command history
" /   # of lines of search pattern history
" <   max # of lines for each register to be saved
" s   max # of Kb for each register to be saved
" h   don't restore hlsearch behavior
" %   save and restore the buffer list
if !isdirectory(s:vimdir . '/.tmp') | call mkdir(s:vimdir . '/.tmp') | endif
if !has('nvim')
  let &viminfo="'10,\"100,:50,n" . s:vimdir . '/.tmp/viminfo'
endif

set scrolloff=5 " Scroll cursor offset

" remember cursor position
augroup CursorPosition
  autocmd!
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
augroup END

set hlsearch " highlight search results
set ignorecase " ignore case in searches ... (\c\C override)
set smartcase " ... unless there are caps in the search
set incsearch " show where the pattern, as it was typed so far, matches

set lazyredraw " redraw only when we need to

" Store temporary files in a central spot
if !isdirectory(s:vimdir . '/.tmp/swap') | call mkdir(s:vimdir . '/.tmp/swap') | endif
let &directory=s:vimdir . '/.tmp/swap//,/var/tmp//,/tmp//,.'
if !isdirectory(s:vimdir . '/.tmp/undo') | call mkdir(s:vimdir . '/.tmp/undo') | endif
let &undodir=s:vimdir . '/.tmp/undo//,/var/tmp//,/tmp//,.'

set undofile " Enable vim to remember undo chains between sessions

" Ignore certain things
set wildignore+=.git,*/node_modules/*,*/deps/build/*,*/stack/*,*/deps/go/*,*/deps/node/*,*/_site/*

set noshowmode "get rid of the default mode indicator because we use airline

let g:mapleader = ',' " Leader key

set ttimeoutlen=50 "shorten pause when leaving insert mode

" }}}

" Plugins {{{

" Install vim-plug if not available
augroup InstallPlug
  autocmd!
    if empty(glob(s:vimdir . '/autoload/plug.vim'))
     if !executable('curl') | echo 'curl needs to be installed' | quit | endif
      silent exe '!curl -fLo ' . s:vimdir . '/autoload/plug.vim --create-dirs ' .
        \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
augroup END

call plug#begin(s:vimdir . '/plugged')

if executable('node')
  let g:coc_data_home= s:vimdir . '/coc'
  let g:coc_config_home = s:vimdir

  Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
  let g:coc_global_extensions = ['coc-prettier', 'coc-eslint', 'coc-tsserver',
        \ 'coc-json', 'coc-html', 'coc-css', 'coc-python', 'coc-vimlsp',
        \ 'coc-tslint-plugin', 'coc-jest', 'coc-tabnine', 'coc-highlight',
        \ 'coc-docker', 'coc-svg', 'coc-rls', 'coc-clangd', 'coc-tailwindcss']
endif


Plug 'andymass/vim-matchup'
Plug 'psliwka/vim-smoothie'
Plug 'mhinz/vim-startify'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ap/vim-buftabline'
Plug 'itchyny/lightline.vim'
Plug 'itchyny/vim-gitbranch'
Plug 'itchyny/vim-cursorword'
Plug 'thaerkh/vim-indentguides'
Plug 'junegunn/goyo.vim'
Plug 'darfink/vim-plist'
Plug 'mhinz/vim-signify'
Plug 'SirVer/ultisnips'
Plug 'epilande/vim-es2015-snippets'
Plug 'epilande/vim-react-snippets'
Plug 'mbbill/undotree'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-repeat'
Plug 'machakann/vim-sandwich'
Plug 'tpope/vim-unimpaired'
Plug 'wellle/targets.vim'
Plug 'skywind3000/asyncrun.vim'
Plug 'sheerun/vim-polyglot'
Plug 'ap/vim-css-color'
Plug 'hail2u/vim-css3-syntax'
Plug 'jxnblk/vim-mdx-js'
Plug 'joshdick/onedark.vim'

call plug#end()

" }}}
" UI and colors {{{

if (has('termguicolors'))
 set termguicolors
endif

" https://vi.stackexchange.com/a/12305/620
function! GetHighlight(group)
  let output = execute('hi ' . a:group)
  let list = split(output, '\s\+')
  let dict = {}
  for item in list
    if match(item, '=') > 0
      let splited = split(item, '=')
      let dict[splited[0]] = splited[1]
    endif
  endfor
  return dict
endfunction


" Color Scheme
if !empty(glob(s:vimdir . '/plugged/onedark.vim'))
  let g:onedark_terminal_italics=1
  colorscheme onedark
  let g:airline_theme='onedark'
  hi xmlAttrib cterm=italic gui=italic
  hi Todo cterm=italic gui=italic
  " hi Normal ctermbg=00 guibg=#181818
  " hi Comment cterm=italic
  hi Visual term=reverse cterm=reverse
  execute 'hi LineNr guifg=' . GetHighlight('Normal').guibg
  execute 'hi EndOfBuffer guifg=' . GetHighlight('Normal').guibg
  execute 'hi BufTabLineCurrent guifg=' . GetHighlight('Function').guifg
endif
" set background=light
" colors plain



" Only show linenumber for active line
set cursorline
hi clear CursorLine
set numberwidth=5

" always show sign column
set signcolumn=yes

" Show Line numbers
set number

" Visual line marking 80 characters
set colorcolumn=80

set cmdheight=2

" Invisible characters
augroup InvisibleCharacters
  autocmd!
  set list
  autocmd BufEnter * set list listchars=tab:▸\ ,trail:≈,eol:¬
augroup END

highlight SpecialKey ctermfg=88 guifg=#870000

" }}}
" tabs vs. spaces, line breaks {{{
set expandtab " Spaces instead of tabs
set tabstop=2 " 2 spaces for each tab
set shiftwidth=2 " 2 spaces for indention

if has('linebreak')
  set breakindent
endif

" }}}
" Plugin configuration and mappings {{{

" gitgutter
nnoremap <silent> <leader>g :call GitGutterDiffToggle()<cr>
let g:git_diff_last_commit = 0
function! GitGutterDiffToggle()
  if g:git_diff_last_commit
    let g:gitgutter_diff_base = ''
    execute 'GitGutter'
    let g:git_diff_last_commit = 0
  else
    let g:gitgutter_diff_base = 'HEAD~1'
    execute 'GitGutter'
    let g:git_diff_last_commit = 1
  endif
endfunction

" buftabline
let g:buftabline_show = 2
let g:buftabline_indicators = 1

" vim-indentguides
let g:indentguides_ignorelist = ['text', 'markdown']

" coc.nvim
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" format file
nmap <silent> gp <Plug>(coc-format)
nmap gp <Plug>(coc-format)


" lightline
let g:lightline = {
\ 'colorscheme': 'minimal',
\ 'active': {
\   'left': [ [ 'mode', 'paste', 'spell' ], [ 'gitbranch', 'readonly' ] ],
\   'right': [ [ 'lineinfo' ], [ 'percent' ],  [ 'filetype' ], [ 'cocerror', 'cocwarn' ] ],
\ },
\ 'subseparator': { 'right': '' },
\ 'mode_map': {
\     'n': 'NORM', 'i': 'INS', 'R': 'REP', 'v': 'VIS', 'V': 'V-L', "\<C-v>": 'V-B',
\     'c': 'CMD', 's': 'SEL', 'S': 'S-L', "\<C-s>": 'S-B', 't': 'TERM'
\ },
\ 'component_function': {
\   'gitbranch': 'gitbranch#name',
\ },
\ 'component_expand': {
\   'cocerror': 'LightLineCocError',
\   'cocwarn' : 'LightLineCocWarn',
\ },
\ 'component_type': {
\   'cocwarn': 'warning',
\   'cocerror': 'error',
\ },
\ }

let g:coc_status_error_sign = '✗'
let g:coc_status_warning_sign = '∆'
execute 'hi CocErrorSign guifg=' . GetHighlight('Error').guifg
execute 'hi CocWarningSign guifg=' . GetHighlight('WarningMsg').guifg
execute 'hi CocInfoSign guifg=' . GetHighlight('WarningMsg').guifg
execute 'hi CocHintSign guifg=' . GetHighlight('Normal').guifg
hi! link CocHighlightText Search
hi! link CocErrorLine SignColumn
hi! link CocWarningLine SignColumn
hi! link CocInfoLine SignColumn
hi! link CocHintLine SignColumn

function! LightLineCocError()
  let error_sign = get(g:, 'coc_status_error_sign')
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) || info['error'] == 0
    return ''
  endif

  return info['error'] . error_sign
endfunction

function! LightLineCocWarn() abort
  let warning_sign = get(g:, 'coc_status_warning_sign')
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) || (info['warning'] == 0 && info['information'] == 0 && info['hint'] == 0)
    return ''
  endif

  return info['warning'] + info['information'] + info['hint']  . warning_sign
endfunction

autocmd User CocDiagnosticChange call lightline#update()

call coc#config('diagnostic', {
\   'errorSign'  : '●',
\   'warningSign': '●',
\   'infoSign'   : '●',
\   'hintSign'   : '●'
\ })

" coc.nvim
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

let g:tcomment#filetype#guess_javascript = 1

" UltiSnips
if !isdirectory(s:vimdir . '/UltiSnips') | call mkdir(s:vimdir . '/UltiSnips') | endif
let g:UltiSnipsSnippetsDir = s:vimdir . '/UltiSnips'

" clang-rename
" let g:clang_rename_path = '/usr/local/opt/llvm/bin/clang-rename'
" noremap <leader>ref :pyf s:vimdir . /scripts/clang-rename.py<cr>

" vim-startify
let g:startify_custom_header = ''

" fzf
function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction

command! ProjectFiles execute 'Files' s:find_git_root()
nnoremap <C-p> :ProjectFiles<CR>
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'PreProc', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'Operator'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Function'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)

" vim-unimpaired vimcasts.org/episodes/bubbling-text/
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" comment line
map <Leader>c gcc<ESC>

" toggle undotree
nnoremap <silent> <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_WindowLayout = 2

" activate jsx syntax highlighting for .js files
let g:jsx_ext_required = 0

" let g:deoplete#enable_at_startup = 1

" }}}
" General mappings {{{

" Saves time; maps the spacebar to colon
nmap <space> :
set pastetoggle=<leader>p " Toggle paste mode
" Keep curson in place when using J to join two lines
nnoremap J mzJ`z

if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j
endif

" buffer navigation
nnoremap <leader>b :bp<CR>
nnoremap <leader>f :bn<CR>
nnoremap <leader>d :bd<CR>

" replay macro on Q instead of switching to Ex mode
nnoremap Q @@

" make Y consistent with D and C commands
nnoremap Y y$

" change rows not lines which is useful on wrapped lines
nnoremap j gj
nnoremap k gk

" In addition to <esc>, jj will exit to normal mode.
inoremap jj <ESC>
inoremap jk <ESC>

" highlight last inserted text
nnoremap gV `[v`]

" Get off my lawn
noremap <Left> <nop>
noremap <Right> <nop>
noremap <Up> <nop>
noremap <Down> <nop>

" Edit user .vimrc
nmap <Leader>v :e $MYVIMRC<CR>

" Source the vimrc file after saving it
augroup ReloadVimrc
  autocmd!
  autocmd bufwritepost *vimrc source $MYVIMRC |
        " \ AirlineRefresh |
        \ call lightline#init() |
        \ call lightline#colorscheme() |
        \ call lightline#update() |
        \ redraw |
        \ echo 'vimrc reloaded!'
augroup END

" Open help pages in new buffer using :Help
command! -nargs=1 -complete=help H :enew | :set buftype=help | :h <args>
command! -nargs=1 -complete=help Help :enew | :set buftype=help | :h <args>
cabbrev help <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Help' : 'help')<CR>
cabbrev h <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'H' : 'h')<CR>

" Toggle spell checking on and off with `,s`
nmap <silent> <leader>s :set spell!<CR>

" Clear search results and quicklist when hitting tab
nnoremap <silent> <tab> :nohlsearch<Bar>:echo<CR>:ccl<CR>

" Close preview window after completion
augroup closeprev
  autocmd CompleteDone * pclose
augroup END

augroup qf
    autocmd!
    " automatically close corresponding loclist when quitting a window
    autocmd QuitPre * if &filetype != 'qf' | silent! lclose | endif
augroup END

" http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" }}}
" File type specific autocmds {{{

let g:tex_flavor = 'latex'
let g:vimtex_compiler_latexmk = {'callback' : 0}
nnoremap <F5> :call <SID>compile_and_run()<CR>
nnoremap <silent> <F6> :AsyncStop<CR>:call asyncrun#quickfix_toggle(10, 0)<CR>

augroup ASYNCRUN
    autocmd!
    " Automatically open the quickfix window
    autocmd User AsyncRunStart call asyncrun#quickfix_toggle(15, 1)
augroup END

function! s:compile_and_run()
  exec 'w'
  if &filetype ==# 'c'
    call MakeAndRun()
  elseif &filetype ==# 'cpp'
    call MakeAndRun()
  elseif &filetype ==# 'javascript.jsx'
    call RunWithNode()
  elseif &filetype ==# 'typescript'
    call RunWithNode()
  elseif &filetype ==# 'tex'
    exec 'AsyncRun latexmk % -pdf'
  elseif &filetype ==# 'python'
    exec 'AsyncRun -raw python3 %'
  endif
endfunction

function! RunWithNode()
  let l:prefix = join(split(system('npm prefix'), '\n'), '')
  let l:pkgpath = l:prefix.'/package.json'
  " if there is a package.json file
  if !empty(glob(l:pkgpath))
    let l:pkg = json_decode(join(readfile(l:pkgpath), "\n"))
    if (index(keys(l:pkg), 'main') >= 0) " if there is a key 'main'
      exec 'AsyncRun -raw node ' . l:prefix . '/' . l:pkg.main
      return
    endif
  endif
  " else fallback to currently opened file
  exec 'AsyncRun -raw node %<'
endfunction

function! MakeAndRun()
  if !empty(glob('Makefile')) " if a Makefile exists use it
    exec 'AsyncRun make && make run'
  else
    exec 'AsyncRun make %< && ./%<'
  endif
endfunction

" File type specific autocommands
augroup Filetypes
    autocmd!
    autocmd BufEnter *.hbt set filetype=html.handlebars syntax=mustache
    " in makefiles, don't expand tabs to spaces
    autocmd FileType make setlocal noexpandtab shiftwidth=8 softtabstop=0
    " turn on concealing for markdown and latex
    autocmd FileType markdown set conceallevel=0
    autocmd FileType tex set conceallevel=2
    " jsonc
    autocmd FileType json syntax match Comment +\/\/.\+$+
augroup END
" }}}
